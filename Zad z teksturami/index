<!DOCTYPE html>
<html>
<!--
  Shows a variety of texture images on a variety of objects, with
  a variety of texture transforms, all under the user's control.
-->
<head>
<meta charset="UTF-8">
<title>Textures and Texture Transforms</title>
<link rel="stylesheet" href="../demo.css">
<style>
#texcanvas {
    background-image: url("textures/NightEarth-512x256.jpg");
    background-size: 100px 100px;
}
</style>
<script src="../script/demo-core.js"></script>
<script src="../script/glsim.js"></script>
<script src="../script/teapot-model-IFS.js"></script>
<script src="../script/basic-object-models-IFS.js"></script>
<script src="../script/slider-canvas.js"></script>
<script>

var camera;

var graphics;  // for drawing on the canvas that shows the texture

var frameNumber = 0;  // frame number for the animation

var sphere, cubeModel, cylinder, cone, torus, teapot, pyramid;  // model data for six objects.

var sliderScale, sliderTranslateX, sliderTranslateY, sliderRotate;

var scale = 1;
var translateX = 0;
var translateY = 0;
var rotate = 0;

var loadingImages = true;
var textureImages = new Array();  // Will hold Image objects loaded from image URLs.
var textureImageURLs = [
    "../textures/brick001.jpg",
    "../textures/Earth-1024x512.jpg",
    "../textures/NightEarth-512x256.jpg",
    "../textures/marble.jpg",
    "../textures/metal003.gif",
    "../textures/mandelbrot.jpeg",
    "../texture/gold ore.jpg"
];

function draw() {

    scale = sliderScale.value(0);
    rotate = sliderRotate.value(0);
    translateX = sliderTranslateX.value(0);
    translateY = sliderTranslateY.value(0);

    drawTextureCanvas(); // Draws the canvas that displays the texture.

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    if (loadingImages) {
        return;
    }
    
    var texnum = Number(document.getElementById("texture").value);
    var objectNumber = Number(document.getElementById("object").value);
    var image = textureImages[texnum];
    glEnable(GL_TEXTURE_2D);
    glTexImage2D(GL_TEXTURE_2D,0,GL_RGBA,image.width,image.height,0,GL_RGBA,GL_UNSIGNED_BYTE,image);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);  // MUST set this since we don't have mipmaps
    
    glMatrixMode(GL_TEXTURE);
    glLoadIdentity();
    glTranslatef(translateX,translateY, 0);
    glRotatef(rotate,0,0,1);
    glScalef(scale,scale,1);
    glMatrixMode(GL_MODELVIEW);
    
    camera.apply();
    
    switch(objectNumber) {
    case 0:
        glRotatef(-90,1,0,0);
        glScalef(1.5,1.5,1.5);
        drawModel(sphere);
        break;
    case 1:
        glScalef(1.2,1.2,1.2);
        drawModel(cubeModel);
        break;
    case 2:
        glRotatef(-90,1,0,0);
        glScalef(1.3,1.3,1.3);
        drawModel(cylinder);
        break;
    case 3:
        glRotatef(-90,1,0,0);
        glScalef(1.3,1.3,1.3);
        drawModel(cone);
        break;
    case 4:
        glScalef(1.6,1.6,1.6);
        drawModel(torus);
        break;
    case 5:
        glScalef(0.06, 0.06, 0.06);
        drawModel(teapot);
        break;
    case 6:
        glScalef(1, 1, 1);
        drawPyramid();
        break;
    }
}

function drawTextureCanvas() {
    if (loadingImages) {
        graphics.fillStyle = "white";
        graphics.fillRect(0,0,300,300);
        graphics.fillStyle = "black";
        graphics.font = "14px serif";
        graphics.fillText("Waiting for images to load...", 10, 40);
        return;
    }
    graphics.clearRect(0,0,300,300);
    graphics.save();
    graphics.translate(100,200);
    graphics.scale(1,-1);
    graphics.translate(translateX*100,translateY*100);
    graphics.rotate(rotate/180 * Math.PI);
    graphics.scale(scale,scale);
    graphics.lineWidth = 5/scale;
    graphics.strokeStyle = "white";
    graphics.strokeRect(-.5,-.5,100,100);
    graphics.lineWidth = 1/scale;
    graphics.strokeStyle = "black";
    graphics.strokeRect(-.5,-.5,100,100);
    graphics.restore();
}

/**
 *  Draws a model using glDrawElements.  The model data must be in the format produced by
 *  the functions in basic-object-models-IFS.js.
 */
function drawModel(model) {
    glEnableClientState(GL_VERTEX_ARRAY);
    glVertexPointer(3,GL_FLOAT,0,model.vertexPositions);
    glEnableClientState(GL_NORMAL_ARRAY);
    glNormalPointer(GL_FLOAT, 0, model.vertexNormals);
    glEnableClientState(GL_TEXTURE_COORD_ARRAY);
    glTexCoordPointer(2,GL_FLOAT,0,model.vertexTextureCoords);
    glDrawElements(GL_TRIANGLES, model.indices.length, GL_UNSIGNED_BYTE, model.indices);
    glDisableClientState(GL_VERTEX_ARRAY);
    glDisableClientState(GL_NORMAL_ARRAY);
    glDisableClientState(GL_TEXTURE_COORD_ARRAY);    
}

function initGL() {
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_NORMALIZE);
    glEnable(GL_DEPTH_TEST);
    glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, [ 1, 1, 1, 1 ]); // white, for texturing
    glClearColor(0,0,0,1);
}

function loadImages() {
    var loadedCt = 0;
    for (var i = 0; i < textureImageURLs.length; i++) {
        textureImages[i] = new Image();
        textureImages[i].onload = imageLoaded;
        textureImages[i].src = textureImageURLs[i];
    }
    function imageLoaded() {
        loadedCt++;
        if (loadedCt == textureImageURLs.length) {
            loadingImages = false;
            glEnable(GL_TEXTURE_2D);
            var texnum = Number(document.getElementById("texture").value);
            var image = textureImages[texnum];
            try {
                glTexImage2D(GL_TEXTURE_2D,0,GL_RGBA,image.width,image.height,0,GL_RGBA,GL_UNSIGNED_BYTE,image);
            } catch(e) {
                // Some browsers (Chrome at least) get a Security error if they try to use an image from the local disk.
                document.getElementById("headline").innerHTML = "Can't access texture.<br>Note: Some browsers can't use a file from a local disk.";
                return;
            }
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);  // MUST set this since we don't have mipmaps
            draw();
            document.getElementById("object").disabled = false;
            document.getElementById("texture").disabled = false;
        }
    }
}

function changeTexture() {
    var texnum = Number(document.getElementById("texture").value);
    document.getElementById("texcanvas").style.backgroundImage = "url('" + textureImageURLs[texnum] + "')";
    var image = textureImages[texnum];
    glTexImage2D(GL_TEXTURE_2D,0,GL_RGBA,image.width,image.height,0,GL_RGBA,GL_UNSIGNED_BYTE,image);
    draw();
}

function doReset() {
    sliderRotate.setValue(0,0);
    sliderScale.setValue(0,1);
    sliderTranslateX.setValue(0,0);
    sliderTranslateY.setValue(0,0);
    camera.lookAt(10,7,20);
    draw();
}

function drawPyramid() {
    const t = Math.sqrt(3) / 4;

    // Pentagonal base
    glBegin(GL_TRIANGLE_FAN);
    glNormal3d(0, 2, 0);
    glTexCoord2d(0.5, 0);
    glColor3f(1, 0, 0);
    glVertex3d(0, 0, 0);
    for (let i = 0; i < 7; i++) {
        const angle = (2 * Math.PI / 6) * i;
        glTexCoord2d(
            Math.cos(angle) * (0.5 + 1 / 5) + 0.5,
            Math.sin(angle) * (0.5 + 1 / 5) + 0.5
        );
        glColor3f(1, 1, 1);
        glVertex3d(Math.cos(angle), 0, Math.sin(angle));
    }
    glEnd();

    // Pyramid sides
    glBegin(GL_TRIANGLE_FAN);
    glTexCoord2d(0.5, 0);
    glVertex3d(0, 1, 0);
    for (let i = 0; i < 7; i++) {
        const angle = (2 * Math.PI / 6) * i;
        glTexCoord2d(Math.cos(angle) + 1, Math.sin(angle) + 1);
        glVertex3d(Math.cos(angle), 0, Math.sin(angle));
    }
    glEnd();
}

// Initialization when the page loads
window.onload = function() {
    try {
        glsimUse("glcanvas", 1);
    } catch (e) {
        document.getElementById("headline").innerHTML = "Sorry, this page requires WebGL.";
        return;
    }
    graphics = document.getElementById("texcanvas").getContext("2d");
    sliderRotate = new SliderCanvas(document.getElementById("rotate"),-180,180,0,draw,"Rotation");
    sliderScale = new SliderCanvas(document.getElementById("scale"),0.1,3,1,draw,"Scale");
    sliderTranslateX = new SliderCanvas(document.getElementById("translateX"),-1,1,0,draw,"Translate X");
    sliderTranslateY = new SliderCanvas(document.getElementById("translateY"),-1,1,0,draw,"Translate Y");
    document.getElementById("rotate").appendChild(sliderRotate.getCanvas());
    document.getElementById("scale").appendChild(sliderScale.getCanvas());
    document.getElementById("translateX").appendChild(sliderTranslateX.getCanvas());
    document.getElementById("translateY").appendChild(sliderTranslateY.getCanvas());
    document.getElementById("object").disabled = true;
    document.getElementById("texture").disabled = true;
    camera = new Camera();
    camera.setScale(10);
    camera.lookAt(10,7,20);
    loadImages();
    initGL();
    setInterval(function() { frameNumber++; draw(); }, 30);
}
</script>
</head>
<body>
<h1 id="headline">Textures and Texture Transforms</h1>
<canvas id="texcanvas" width="200" height="200"></canvas>
<canvas id="glcanvas" width="700" height="500"></canvas>
<p>Use the sliders to control the texture transforms. The first canvas
shows a 100-by-100 section of the texture image, using the same texture
transform as the one used to draw the objects. Use the drop-down menus
to select which texture and which object to display. This is not an
easy program; you will have to learn a lot about texturing to write
this program.</p>
<form action="#">
    <p>Object: <select id="object" onchange="draw()">
      <option value="0">Sphere</option>
      <option value="1">Cube</option>
      <option value="2">Cylinder</option>
      <option value="3">Cone</option>
      <option value="4">Torus</option>
      <option value="5">Teapot</option>
      <option value="6">Pyramid</option>
    </select>
    &nbsp; &nbsp; &nbsp; Texture: <select id="texture" onchange="changeTexture()">
      <option value="0">brick</option>
      <option value="1">Earth</option>
      <option value="2">Night Earth</option>
      <option value="3">marble</option>
      <option value="4">metal</option>
      <option value="5">mandelbrot</option>
      <option value="6">diamond ore</option>
    </select></p>
    <table><tr>
      <td>Rotation: <div id="rotate"></div></td>
      <td>Scale: <div id="scale"></div></td>
    </tr><tr>
      <td>Translate X: <div id="translateX"></div></td>
      <td>Translate Y: <div id="translateY"></div></td>
    </tr></table>
</form>
<button onclick="doReset()">Reset View</button>
</body>
</html>
